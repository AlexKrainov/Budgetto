// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyProfile.Entity.Model;

namespace MyProfile.Entity.Migrations
{
    [DbContext(typeof(MyProfile_DBContext))]
    [Migration("20210107161203_MyProfile_073")]
    partial class MyProfile_073
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MyProfile.Entity.Model.Account", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountTypeID");

                    b.Property<decimal>("Balance")
                        .HasColumnType("Money");

                    b.Property<int?>("BankID");

                    b.Property<decimal>("CachbackBalance")
                        .HasColumnType("Money");

                    b.Property<decimal?>("CachbackForAllPercent");

                    b.Property<int?>("CurrencyID");

                    b.Property<DateTime>("DateCreate");

                    b.Property<string>("Description")
                        .HasMaxLength(264);

                    b.Property<DateTime?>("ExpirationDate");

                    b.Property<decimal?>("InterestRate");

                    b.Property<bool>("IsCachback");

                    b.Property<bool>("IsCachbackMoney");

                    b.Property<bool>("IsDefault");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsHide");

                    b.Property<bool>("IsOverdraft");

                    b.Property<DateTime>("LastChanges");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<DateTime?>("ResetCachbackDate");

                    b.Property<Guid>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("AccountTypeID");

                    b.HasIndex("BankID");

                    b.HasIndex("CurrencyID");

                    b.HasIndex("UserID");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("MyProfile.Entity.Model.AccountType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CodeName")
                        .IsRequired()
                        .HasMaxLength(16);

                    b.Property<string>("Description")
                        .HasMaxLength(512);

                    b.Property<string>("Icon")
                        .HasMaxLength(64);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(24);

                    b.HasKey("ID");

                    b.ToTable("AccountTypes");
                });

            modelBuilder.Entity("MyProfile.Entity.Model.Bank", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageSrc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.HasKey("ID");

                    b.ToTable("Banks");
                });

            modelBuilder.Entity("MyProfile.Entity.Model.BudgetArea", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CodeName");

                    b.Property<string>("Description");

                    b.Property<bool>("IsCreatedByConstructor");

                    b.Property<bool>("IsShowInCollective")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsShowOnSite")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<Guid?>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("BudgetAreas");
                });

            modelBuilder.Entity("MyProfile.Entity.Model.BudgetRecord", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccountID");

                    b.Property<int>("BudgetSectionID");

                    b.Property<decimal>("Cashback")
                        .HasColumnType("Money");

                    b.Property<int?>("CurrencyID")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<int>("CurrencyNominal")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<decimal?>("CurrencyRate")
                        .HasColumnType("Money");

                    b.Property<DateTime>("DateTimeCreate");

                    b.Property<DateTime?>("DateTimeDelete");

                    b.Property<DateTime>("DateTimeEdit");

                    b.Property<DateTime>("DateTimeOfPayment");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsHide");

                    b.Property<bool>("IsShowForCollection");

                    b.Property<string>("RawData");

                    b.Property<decimal>("Total")
                        .HasColumnType("Money");

                    b.Property<Guid>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("AccountID");

                    b.HasIndex("BudgetSectionID");

                    b.HasIndex("CurrencyID");

                    b.HasIndex("DateTimeOfPayment");

                    b.HasIndex("UserID");

                    b.ToTable("BudgetRecords");
                });

            modelBuilder.Entity("MyProfile.Entity.Model.BudgetSection", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BudgetAreaID");

                    b.Property<string>("CodeName");

                    b.Property<string>("CssBackground")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(24)
                        .HasDefaultValue("#eeeeee");

                    b.Property<string>("CssBorder")
                        .HasMaxLength(24);

                    b.Property<string>("CssColor")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(24)
                        .HasDefaultValue("#rgba(24,28,33,0.8)");

                    b.Property<string>("CssIcon")
                        .HasMaxLength(64);

                    b.Property<string>("Description");

                    b.Property<bool>("IsCreatedByConstructor");

                    b.Property<bool>("IsShowInCollective")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsShowOnSite")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("SectionTypeID");

                    b.HasKey("ID");

                    b.HasIndex("BudgetAreaID");

                    b.HasIndex("SectionTypeID");

                    b.ToTable("BudgetSections");
                });

            modelBuilder.Entity("MyProfile.Entity.Model.Chart", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChartTypeID");

                    b.Property<DateTime>("DateCreate");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("LastDateEdit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<Guid>("UserID");

                    b.Property<int>("VisibleElementID");

                    b.HasKey("ID");

                    b.HasIndex("ChartTypeID");

                    b.HasIndex("UserID");

                    b.HasIndex("VisibleElementID");

                    b.ToTable("Charts");
                });

            modelBuilder.Entity("MyProfile.Entity.Model.ChartField", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChartID");

                    b.Property<string>("CssColor")
                        .HasMaxLength(24);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.HasKey("ID");

                    b.HasIndex("ChartID");

                    b.ToTable("ChartFields");
                });

            modelBuilder.Entity("MyProfile.Entity.Model.ChartType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CodeName")
                        .IsRequired()
                        .HasMaxLength(16);

                    b.Property<bool>("IsBig");

                    b.Property<bool>("IsUsing");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(24);

                    b.HasKey("ID");

                    b.ToTable("ChartTypes");
                });

            modelBuilder.Entity("MyProfile.Entity.Model.Chat", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime>("DateEdit");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(512);

                    b.HasKey("ID");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("MyProfile.Entity.Model.ChatUser", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChatID");

                    b.Property<DateTime>("DateAdded");

                    b.Property<DateTime?>("DateLeft");

                    b.Property<bool>("IsChatOwner");

                    b.Property<bool>("IsMute");

                    b.Property<bool>("Left");

                    b.Property<Guid>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("ChatID");

                    b.HasIndex("UserID");

                    b.ToTable("ChatUsers");
                });

            modelBuilder.Entity("MyProfile.Entity.Model.CollectiveBudget", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("CollectiveBudgets");
                });

            modelBuilder.Entity("MyProfile.Entity.Model.CollectiveBudgetRequest", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("CollectiveBudgetID");

                    b.Property<int>("CollectiveBudgetRequestOwnerID");

                    b.Property<DateTime>("DateAdded");

                    b.Property<DateTime>("DateUpdate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(16);

                    b.Property<Guid?>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("CollectiveBudgetID");

                    b.HasIndex("CollectiveBudgetRequestOwnerID");

                    b.HasIndex("UserID");

                    b.ToTable("CollectiveBudgetRequests");
                });

            modelBuilder.Entity("MyProfile.Entity.Model.CollectiveBudgetRequestOwner", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("CollectiveBudgetRequestOwners");
                });

            modelBuilder.Entity("MyProfile.Entity.Model.CollectiveBudgetUser", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("CollectiveBudgetID");

                    b.Property<DateTime>("DateAdded");

                    b.Property<DateTime>("DateUpdate");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(16);

                    b.Property<Guid>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("CollectiveBudgetID");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("CollectiveBudgetUsers");
                });

            modelBuilder.Entity("MyProfile.Entity.Model.CollectiveSection", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ChildSectionID");

                    b.Property<int?>("SectionID");

                    b.HasKey("ID");

                    b.HasIndex("ChildSectionID");

                    b.HasIndex("SectionID");

                    b.ToTable("CollectiveSections");
                });

            modelBuilder.Entity("MyProfile.Entity.Model.Currency", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CanBeUser");

                    b.Property<string>("CodeName")
                        .IsRequired()
                        .HasMaxLength(3);

                    b.Property<string>("CodeName_CBR")
                        .HasMaxLength(8);

                    b.Property<int?>("CodeNumber_CBR");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(24);

                    b.Property<string>("SpecificCulture")
                        .IsRequired()
                        .HasMaxLength(16);

                    b.HasKey("ID");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("MyProfile.Entity.Model.ErrorLog", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasMaxLength(512);

                    b.Property<DateTime>("CurrentDate");

                    b.Property<string>("ErrorText");

                    b.Property<Guid>("UserSessionID");

                    b.Property<string>("Where")
                        .HasMaxLength(64);

                    b.HasKey("ID");

                    b.HasIndex("UserSessionID");

                    b.ToTable("ErrorLogs");
                });

            modelBuilder.Entity("MyProfile.Entity.Model.Feedback", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChatID");

                    b.Property<int>("MoodID");

                    b.Property<int>("Priority");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.HasKey("ID");

                    b.HasIndex("ChatID")
                        .IsUnique();

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("MyProfile.Entity.Model.Goal", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateEnd");

                    b.Property<DateTime?>("DateStart");

                    b.Property<string>("Description");

                    b.Property<decimal?>("ExpectationMoney")
                        .HasColumnType("Money");

                    b.Property<bool>("IsCreatedByConstructor");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFinished");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<Guid>("UserID");

                    b.Property<int>("VisibleElementID");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.HasIndex("VisibleElementID");

                    b.ToTable("Goals");
                });

            modelBuilder.Entity("MyProfile.Entity.Model.GoalRecord", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDateTime");

                    b.Property<DateTime?>("DateTimeOfPayment");

                    b.Property<int>("GoalID");

                    b.Property<decimal>("Total")
                        .HasColumnType("Money");

                    b.Property<Guid?>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("GoalID");

                    b.HasIndex("UserID");

                    b.ToTable("GoalRecords");
                });

            modelBuilder.Entity("MyProfile.Entity.Model.HelpArticle", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime>("DateEdit");

                    b.Property<int>("HelpMenuID");

                    b.Property<bool>("IsVisible")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("KeyWords")
                        .IsRequired();

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(512);

                    b.Property<Guid?>("OwnerID");

                    b.Property<string>("RelatedArticleIDs")
                        .HasMaxLength(256);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(512);

                    b.HasKey("ID");

                    b.HasIndex("HelpMenuID");

                    b.HasIndex("OwnerID");

                    b.ToTable("HelpArticles");
                });

            modelBuilder.Entity("MyProfile.Entity.Model.HelpArticleUserView", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateView");

                    b.Property<int>("HelpArticleID");

                    b.Property<Guid?>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("HelpArticleID");

                    b.HasIndex("UserID");

                    b.ToTable("HelpArticleUserViews");
                });

            modelBuilder.Entity("MyProfile.Entity.Model.HelpMenu", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<bool>("IsVisible")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<int>("Order");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.HasKey("ID");

                    b.ToTable("HelpMenus");
                });

            modelBuilder.Entity("MyProfile.Entity.Model.IPSetting", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Counter");

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("IP")
                        .HasMaxLength(64);

                    b.Property<bool>("IsBlock");

                    b.Property<DateTime>("LastVisit");

                    b.HasKey("ID");

                    b.ToTable("IPSettings");
                });

            modelBuilder.Entity("MyProfile.Entity.Model.Limit", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<bool>("IsCreatedByConstructor");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFinished");

                    b.Property<decimal>("LimitMoney")
                        .HasColumnType("Money");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("PeriodTypeID");

                    b.Property<Guid>("UserID");

                    b.Property<int>("VisibleElementID");

                    b.HasKey("ID");

                    b.HasIndex("PeriodTypeID");

                    b.HasIndex("UserID");

                    b.HasIndex("VisibleElementID");

                    b.ToTable("Limits");
                });

            modelBuilder.Entity("MyProfile.Entity.Model.MailLog", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CameDateTime");

                    b.Property<int>("Code");

                    b.Property<string>("Comment");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<bool>("IsSuccessful");

                    b.Property<int>("MailTypeID");

                    b.Property<DateTime>("SentDateTime");

                    b.Property<Guid?>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("MailTypeID");

                    b.HasIndex("UserID");

                    b.ToTable("MailLogs");
                });

            modelBuilder.Entity("MyProfile.Entity.Model.MailType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CodeName");

                    b.HasKey("ID");

                    b.ToTable("MailTypes");
                });

            modelBuilder.Entity("MyProfile.Entity.Model.Message", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChatID");

                    b.Property<int?>("ChatUserID");

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime>("DateEdit");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Text");

                    b.HasKey("ID");

                    b.HasIndex("ChatID");

                    b.HasIndex("ChatUserID");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("MyProfile.Entity.Model.Payment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateFrom");

                    b.Property<DateTime>("DateTo");

                    b.Property<bool>("IsPaid");

                    b.Property<DateTime?>("LastDatePayment");

                    b.Property<string>("Tariff")
                        .HasMaxLength(16);

                    b.HasKey("ID");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("MyProfile.Entity.Model.PaymentHistory", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateClickToPay");

                    b.Property<DateTime?>("DateFinisthToPay");

                    b.Property<DateTime?>("DateFrom");

                    b.Property<DateTime?>("DateTo");

                    b.Property<bool>("IsPaid");

                    b.Property<int>("PaymentID");

                    b.Property<string>("Tariff")
                        .HasMaxLength(16);

                    b.HasKey("ID");

                    b.HasIndex("PaymentID");

                    b.ToTable("PaymentHistories");
                });

            modelBuilder.Entity("MyProfile.Entity.Model.PeriodType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CodeName")
                        .IsRequired();

                    b.Property<bool>("IsUsing");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("PeriodTypes");
                });

            modelBuilder.Entity("MyProfile.Entity.Model.PromoCode", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CodeName")
                        .IsRequired()
                        .HasMaxLength(16);

                    b.Property<DateTime>("DateFrom");

                    b.Property<DateTime>("DateTo");

                    b.Property<int>("Percent");

                    b.Property<int>("TryCounter");

                    b.HasKey("ID");

                    b.ToTable("PromoCodes");
                });

            modelBuilder.Entity("MyProfile.Entity.Model.PromoCodeHistory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CurrentDateTime");

                    b.Property<string>("InputPromoCode")
                        .IsRequired()
                        .HasMaxLength(512);

                    b.Property<bool>("IsApplied");

                    b.Property<bool>("IsSuccess");

                    b.Property<Guid>("PaymentHistoryID");

                    b.Property<int?>("PromoCodeID");

                    b.HasKey("ID");

                    b.HasIndex("PaymentHistoryID");

                    b.HasIndex("PromoCodeID");

                    b.ToTable("PromoCodeHistories");
                });

            modelBuilder.Entity("MyProfile.Entity.Model.RecordTag", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateSet");

                    b.Property<int>("RecordID");

                    b.Property<int>("UserTagID");

                    b.HasKey("ID");

                    b.HasIndex("RecordID");

                    b.HasIndex("UserTagID");

                    b.ToTable("RecordTags");
                });

            modelBuilder.Entity("MyProfile.Entity.Model.Reminder", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CssIcon")
                        .HasMaxLength(32);

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime>("DateEdit");

                    b.Property<DateTime?>("DateReminder");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsReminderByMail");

                    b.Property<bool>("IsRepeat");

                    b.Property<string>("RepeatEvery")
                        .HasMaxLength(16);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<Guid>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("Reminders");
                });

            modelBuilder.Entity("MyProfile.Entity.Model.ReminderDate", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateReminder");

                    b.Property<bool>("IsDone");

                    b.Property<int>("ReminderID");

                    b.HasKey("ID");

                    b.HasIndex("ReminderID");

                    b.ToTable("ReminderDates");
                });

            modelBuilder.Entity("MyProfile.Entity.Model.Resource", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BodyBase64")
                        .HasMaxLength(8);

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime>("DateEdit");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasMaxLength(24);

                    b.Property<string>("FolderName")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.Property<string>("SrcPath")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("ID");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("MyProfile.Entity.Model.ResourceMessage", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MessageID");

                    b.Property<int>("ResourceID");

                    b.HasKey("ID");

                    b.HasIndex("MessageID");

                    b.HasIndex("ResourceID");

                    b.ToTable("ResourceMessages");
                });

            modelBuilder.Entity("MyProfile.Entity.Model.SectionGroupChart", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BudgetSectionID");

                    b.Property<int>("ChartFieldID");

                    b.HasKey("ID");

                    b.HasIndex("BudgetSectionID");

                    b.HasIndex("ChartFieldID");

                    b.ToTable("SectionGroupCharts");
                });

            modelBuilder.Entity("MyProfile.Entity.Model.SectionGroupLimit", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BudgetSectionID");

                    b.Property<int>("LimitID");

                    b.HasKey("ID");

                    b.HasIndex("BudgetSectionID");

                    b.HasIndex("LimitID");

                    b.ToTable("SectionGroupLimits");
                });

            modelBuilder.Entity("MyProfile.Entity.Model.SectionType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CodeName")
                        .IsRequired()
                        .HasMaxLength(16);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(16);

                    b.HasKey("ID");

                    b.ToTable("SectionTypes");
                });

            modelBuilder.Entity("MyProfile.Entity.Model.SectionTypeView", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsShow");

                    b.Property<int>("PeriodTypeID");

                    b.Property<int>("SectionTypeID");

                    b.Property<Guid>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("PeriodTypeID");

                    b.HasIndex("SectionTypeID");

                    b.HasIndex("UserID");

                    b.ToTable("SectionTypeViews");
                });

            modelBuilder.Entity("MyProfile.Entity.Model.SiteSettings", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EmailsForFeedback");

                    b.HasKey("ID");

                    b.ToTable("SiteSettings");
                });

            modelBuilder.Entity("MyProfile.Entity.Model.Tag", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreate");

                    b.Property<string>("IconCss")
                        .HasMaxLength(32);

                    b.Property<string>("Image")
                        .HasMaxLength(256);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(132);

                    b.HasKey("ID");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("MyProfile.Entity.Model.Template", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CurrentPeriod");

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime?>("DateDelete");

                    b.Property<DateTime>("DateEdit");

                    b.Property<string>("Description");

                    b.Property<bool>("IsCountCollectiveBudget");

                    b.Property<bool>("IsCreatedByConstructor");

                    b.Property<bool>("IsDefault");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastSeenDate");

                    b.Property<int>("MaxRowInAPage");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("PeriodTypeID");

                    b.Property<Guid>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("PeriodTypeID");

                    b.HasIndex("UserID");

                    b.ToTable("Templates");
                });

            modelBuilder.Entity("MyProfile.Entity.Model.TemplateBudgetSection", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BudgetSectionID");

                    b.Property<int>("TemplateColumnID");

                    b.HasKey("ID");

                    b.HasIndex("BudgetSectionID");

                    b.HasIndex("TemplateColumnID");

                    b.ToTable("TemplateBudgetSections");
                });

            modelBuilder.Entity("MyProfile.Entity.Model.TemplateColumn", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ColumnTypeID");

                    b.Property<int?>("FooterActionTypeID");

                    b.Property<string>("Format");

                    b.Property<string>("Formula")
                        .IsRequired();

                    b.Property<bool>("IsShow");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Order");

                    b.Property<int?>("PlaceAfterCommon");

                    b.Property<int>("TemplateID");

                    b.HasKey("ID");

                    b.HasIndex("TemplateID");

                    b.ToTable("TemplateColumns");
                });

            modelBuilder.Entity("MyProfile.Entity.Model.ToDoList", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime>("DateEdit");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFavorite");

                    b.Property<int>("PeriodTypeID");

                    b.Property<string>("Title");

                    b.Property<int>("ToDoListFolderID");

                    b.Property<int>("VisibleElementID");

                    b.HasKey("ID");

                    b.HasIndex("PeriodTypeID");

                    b.HasIndex("ToDoListFolderID");

                    b.HasIndex("VisibleElementID");

                    b.ToTable("ToDoLists");
                });

            modelBuilder.Entity("MyProfile.Entity.Model.ToDoListFolder", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CssIcon")
                        .HasMaxLength(32);

                    b.Property<string>("Title");

                    b.Property<Guid>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("ToDoListFolders");
                });

            modelBuilder.Entity("MyProfile.Entity.Model.ToDoListItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime>("DateEdit");

                    b.Property<Guid?>("DoneUserID");

                    b.Property<bool>("IsDone");

                    b.Property<int>("Order");

                    b.Property<Guid?>("OwnerUserID");

                    b.Property<string>("Text");

                    b.Property<int>("ToDoListID");

                    b.HasKey("ID");

                    b.HasIndex("DoneUserID");

                    b.HasIndex("OwnerUserID");

                    b.HasIndex("ToDoListID");

                    b.ToTable("ToDoListItems");
                });

            modelBuilder.Entity("MyProfile.Entity.Model.User", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CurrencyID")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<DateTime>("DateCreate");

                    b.Property<DateTime?>("DateDelete");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("HashPassword")
                        .IsRequired()
                        .HasMaxLength(44);

                    b.Property<string>("ImageLink");

                    b.Property<bool>("IsAllowCollectiveBudget");

                    b.Property<bool>("IsConfirmEmail");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("PaymentID");

                    b.Property<int?>("ResourceID");

                    b.Property<string>("SaltPassword")
                        .IsRequired()
                        .HasMaxLength(44);

                    b.Property<int>("UserTypeID")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.HasKey("ID");

                    b.HasIndex("CurrencyID");

                    b.HasIndex("PaymentID")
                        .IsUnique();

                    b.HasIndex("ResourceID");

                    b.HasIndex("UserTypeID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MyProfile.Entity.Model.UserErrorLog", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ErrorLogID");

                    b.Property<int?>("UserLogID");

                    b.HasKey("ID");

                    b.HasIndex("ErrorLogID");

                    b.HasIndex("UserLogID");

                    b.ToTable("UserErrorLogs");
                });

            modelBuilder.Entity("MyProfile.Entity.Model.UserLog", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActionCodeName")
                        .HasMaxLength(64);

                    b.Property<string>("Comment");

                    b.Property<DateTime>("CurrentDateTime");

                    b.Property<Guid>("UserSessionID");

                    b.HasKey("ID");

                    b.HasIndex("UserSessionID");

                    b.ToTable("UserLogs");
                });

            modelBuilder.Entity("MyProfile.Entity.Model.UserSession", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BrowerName")
                        .HasMaxLength(32);

                    b.Property<string>("BrowserVersion")
                        .HasMaxLength(16);

                    b.Property<string>("City")
                        .HasMaxLength(32);

                    b.Property<string>("Comment");

                    b.Property<string>("ContinentCode")
                        .HasMaxLength(32);

                    b.Property<string>("ContinentName")
                        .HasMaxLength(32);

                    b.Property<string>("Country")
                        .HasMaxLength(32);

                    b.Property<DateTime>("EnterDate");

                    b.Property<string>("IP")
                        .HasMaxLength(64);

                    b.Property<string>("Index")
                        .HasMaxLength(32);

                    b.Property<string>("Info");

                    b.Property<bool>("IsLandingPage");

                    b.Property<bool>("IsPhone");

                    b.Property<bool>("IsTablet");

                    b.Property<string>("Location")
                        .HasMaxLength(64);

                    b.Property<DateTime?>("LogOutDate");

                    b.Property<string>("OS_Name")
                        .HasMaxLength(32);

                    b.Property<string>("Os_Version")
                        .HasMaxLength(16);

                    b.Property<string>("ProviderInfo");

                    b.Property<string>("Referrer");

                    b.Property<string>("ScreenSize")
                        .HasMaxLength(16);

                    b.Property<string>("Threat");

                    b.Property<Guid?>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("UserSessions");
                });

            modelBuilder.Entity("MyProfile.Entity.Model.UserSettings", b =>
                {
                    b.Property<Guid>("ID");

                    b.Property<bool>("BudgetPages_WithCollective")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("CanUseAlgorithm")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("GoalPage_IsShow_Collective");

                    b.Property<bool>("GoalPage_IsShow_Finished");

                    b.Property<bool>("IsShowConstructor");

                    b.Property<bool>("IsShowCookie")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsShowFirstEnterHint")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsShowHints")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("LimitPage_IsShow_Collective");

                    b.Property<bool>("LimitPage_Show_IsFinished")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("Mail_News")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("Mail_Reminders")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("Month_Accounts")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("Month_BigCharts")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("Month_EarningWidget")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("Month_GoalWidgets")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("Month_InvestingWidget")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("Month_LimitWidgets")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("Month_SpendingWidget")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("Month_Summary")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("WebSiteTheme")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue("light");

                    b.Property<bool>("Year_Accounts")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("Year_BigCharts")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("Year_EarningWidget")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("Year_GoalWidgets")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("Year_InvestingWidget")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("Year_LimitWidgets")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("Year_SpendingWidget")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("Year_Summary")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.HasKey("ID");

                    b.ToTable("UserSettings");
                });

            modelBuilder.Entity("MyProfile.Entity.Model.UserTag", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreate");

                    b.Property<string>("IconCss")
                        .HasMaxLength(32);

                    b.Property<string>("Image")
                        .HasMaxLength(256);

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("TagID");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(132);

                    b.Property<Guid?>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("TagID");

                    b.HasIndex("UserID");

                    b.ToTable("UserTags");
                });

            modelBuilder.Entity("MyProfile.Entity.Model.UserType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CodeName")
                        .IsRequired()
                        .HasMaxLength(8);

                    b.HasKey("ID");

                    b.ToTable("UserTypes");
                });

            modelBuilder.Entity("MyProfile.Entity.Model.VisibleElement", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsShowInCollective")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsShowOnDashboards")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsShow_BudgetMonth");

                    b.Property<bool>("IsShow_BudgetYear");

                    b.HasKey("ID");

                    b.ToTable("VisibleElements");
                });

            modelBuilder.Entity("MyProfile.Entity.Model.Account", b =>
                {
                    b.HasOne("MyProfile.Entity.Model.AccountType", "AccountType")
                        .WithMany()
                        .HasForeignKey("AccountTypeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyProfile.Entity.Model.Bank", "Bank")
                        .WithMany("Accounts")
                        .HasForeignKey("BankID");

                    b.HasOne("MyProfile.Entity.Model.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyID");

                    b.HasOne("MyProfile.Entity.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyProfile.Entity.Model.BudgetArea", b =>
                {
                    b.HasOne("MyProfile.Entity.Model.User", "User")
                        .WithMany("BudgetAreas")
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("MyProfile.Entity.Model.BudgetRecord", b =>
                {
                    b.HasOne("MyProfile.Entity.Model.Account", "Account")
                        .WithMany("BudgetRecords")
                        .HasForeignKey("AccountID");

                    b.HasOne("MyProfile.Entity.Model.BudgetSection", "BudgetSection")
                        .WithMany("BudgetRecords")
                        .HasForeignKey("BudgetSectionID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyProfile.Entity.Model.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyID");

                    b.HasOne("MyProfile.Entity.Model.User", "User")
                        .WithMany("BudgetRecords")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyProfile.Entity.Model.BudgetSection", b =>
                {
                    b.HasOne("MyProfile.Entity.Model.BudgetArea", "BudgetArea")
                        .WithMany("BudgetSectinos")
                        .HasForeignKey("BudgetAreaID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyProfile.Entity.Model.SectionType", "SectionType")
                        .WithMany()
                        .HasForeignKey("SectionTypeID");
                });

            modelBuilder.Entity("MyProfile.Entity.Model.Chart", b =>
                {
                    b.HasOne("MyProfile.Entity.Model.ChartType", "ChartType")
                        .WithMany()
                        .HasForeignKey("ChartTypeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyProfile.Entity.Model.User", "User")
                        .WithMany("Charts")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyProfile.Entity.Model.VisibleElement", "VisibleElement")
                        .WithMany()
                        .HasForeignKey("VisibleElementID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyProfile.Entity.Model.ChartField", b =>
                {
                    b.HasOne("MyProfile.Entity.Model.Chart", "Chart")
                        .WithMany("ChartFields")
                        .HasForeignKey("ChartID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyProfile.Entity.Model.ChatUser", b =>
                {
                    b.HasOne("MyProfile.Entity.Model.Chat", "Chat")
                        .WithMany("ChatUsers")
                        .HasForeignKey("ChatID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyProfile.Entity.Model.User", "User")
                        .WithMany("ChatUsers")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyProfile.Entity.Model.CollectiveBudgetRequest", b =>
                {
                    b.HasOne("MyProfile.Entity.Model.CollectiveBudget", "CollectiveBudget")
                        .WithMany("CollectiveBudgetRequests")
                        .HasForeignKey("CollectiveBudgetID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyProfile.Entity.Model.CollectiveBudgetRequestOwner", "CollectiveBudgetRequestOwner")
                        .WithMany()
                        .HasForeignKey("CollectiveBudgetRequestOwnerID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyProfile.Entity.Model.User", "User")
                        .WithMany("CollectiveBudgetRequests")
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("MyProfile.Entity.Model.CollectiveBudgetRequestOwner", b =>
                {
                    b.HasOne("MyProfile.Entity.Model.User", "User")
                        .WithMany("CollectiveBudgetRequestOwners")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyProfile.Entity.Model.CollectiveBudgetUser", b =>
                {
                    b.HasOne("MyProfile.Entity.Model.CollectiveBudget", "CollectiveBudget")
                        .WithMany("CollectiveBudgetUsers")
                        .HasForeignKey("CollectiveBudgetID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyProfile.Entity.Model.User", "User")
                        .WithOne("CollectiveBudgetUser")
                        .HasForeignKey("MyProfile.Entity.Model.CollectiveBudgetUser", "UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyProfile.Entity.Model.CollectiveSection", b =>
                {
                    b.HasOne("MyProfile.Entity.Model.BudgetSection", "ChildSection")
                        .WithMany()
                        .HasForeignKey("ChildSectionID");

                    b.HasOne("MyProfile.Entity.Model.BudgetSection", "Section")
                        .WithMany("CollectiveSections")
                        .HasForeignKey("SectionID");
                });

            modelBuilder.Entity("MyProfile.Entity.Model.ErrorLog", b =>
                {
                    b.HasOne("MyProfile.Entity.Model.UserSession", "UserSession")
                        .WithMany()
                        .HasForeignKey("UserSessionID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyProfile.Entity.Model.Feedback", b =>
                {
                    b.HasOne("MyProfile.Entity.Model.Chat", "Chat")
                        .WithOne("Feedback")
                        .HasForeignKey("MyProfile.Entity.Model.Feedback", "ChatID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyProfile.Entity.Model.Goal", b =>
                {
                    b.HasOne("MyProfile.Entity.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyProfile.Entity.Model.VisibleElement", "VisibleElement")
                        .WithMany()
                        .HasForeignKey("VisibleElementID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyProfile.Entity.Model.GoalRecord", b =>
                {
                    b.HasOne("MyProfile.Entity.Model.Goal", "Goal")
                        .WithMany("GoalRecords")
                        .HasForeignKey("GoalID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyProfile.Entity.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("MyProfile.Entity.Model.HelpArticle", b =>
                {
                    b.HasOne("MyProfile.Entity.Model.HelpMenu", "HelpMenu")
                        .WithMany("HelpArticles")
                        .HasForeignKey("HelpMenuID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyProfile.Entity.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("OwnerID");
                });

            modelBuilder.Entity("MyProfile.Entity.Model.HelpArticleUserView", b =>
                {
                    b.HasOne("MyProfile.Entity.Model.HelpArticle", "HelpArticle")
                        .WithMany("HelpArticleUserViews")
                        .HasForeignKey("HelpArticleID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyProfile.Entity.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("MyProfile.Entity.Model.Limit", b =>
                {
                    b.HasOne("MyProfile.Entity.Model.PeriodType", "PeriodType")
                        .WithMany()
                        .HasForeignKey("PeriodTypeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyProfile.Entity.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyProfile.Entity.Model.VisibleElement", "VisibleElement")
                        .WithMany()
                        .HasForeignKey("VisibleElementID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyProfile.Entity.Model.MailLog", b =>
                {
                    b.HasOne("MyProfile.Entity.Model.MailType", "MailType")
                        .WithMany()
                        .HasForeignKey("MailTypeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyProfile.Entity.Model.User", "User")
                        .WithMany("MailLogs")
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("MyProfile.Entity.Model.Message", b =>
                {
                    b.HasOne("MyProfile.Entity.Model.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyProfile.Entity.Model.ChatUser", "ChatUser")
                        .WithMany()
                        .HasForeignKey("ChatUserID");
                });

            modelBuilder.Entity("MyProfile.Entity.Model.PaymentHistory", b =>
                {
                    b.HasOne("MyProfile.Entity.Model.Payment", "Payment")
                        .WithMany("PaymentHistories")
                        .HasForeignKey("PaymentID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyProfile.Entity.Model.PromoCodeHistory", b =>
                {
                    b.HasOne("MyProfile.Entity.Model.PaymentHistory", "PaymentHistory")
                        .WithMany("PromoCodeHistories")
                        .HasForeignKey("PaymentHistoryID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyProfile.Entity.Model.PromoCode", "PromoCode")
                        .WithMany("PromoCodeHistories")
                        .HasForeignKey("PromoCodeID");
                });

            modelBuilder.Entity("MyProfile.Entity.Model.RecordTag", b =>
                {
                    b.HasOne("MyProfile.Entity.Model.BudgetRecord", "Record")
                        .WithMany("Tags")
                        .HasForeignKey("RecordID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyProfile.Entity.Model.UserTag", "UserTag")
                        .WithMany("RecordTags")
                        .HasForeignKey("UserTagID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyProfile.Entity.Model.Reminder", b =>
                {
                    b.HasOne("MyProfile.Entity.Model.User", "User")
                        .WithMany("Reminders")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyProfile.Entity.Model.ReminderDate", b =>
                {
                    b.HasOne("MyProfile.Entity.Model.Reminder", "Reminder")
                        .WithMany("ReminderDates")
                        .HasForeignKey("ReminderID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyProfile.Entity.Model.ResourceMessage", b =>
                {
                    b.HasOne("MyProfile.Entity.Model.Message", "Message")
                        .WithMany("ResourceMessages")
                        .HasForeignKey("MessageID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyProfile.Entity.Model.Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyProfile.Entity.Model.SectionGroupChart", b =>
                {
                    b.HasOne("MyProfile.Entity.Model.BudgetSection", "BudgetSection")
                        .WithMany()
                        .HasForeignKey("BudgetSectionID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyProfile.Entity.Model.ChartField", "ChartField")
                        .WithMany("SectionGroupCharts")
                        .HasForeignKey("ChartFieldID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyProfile.Entity.Model.SectionGroupLimit", b =>
                {
                    b.HasOne("MyProfile.Entity.Model.BudgetSection", "BudgetSection")
                        .WithMany("SectionGroupLimits")
                        .HasForeignKey("BudgetSectionID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyProfile.Entity.Model.Limit", "Limit")
                        .WithMany("SectionGroupLimits")
                        .HasForeignKey("LimitID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyProfile.Entity.Model.SectionTypeView", b =>
                {
                    b.HasOne("MyProfile.Entity.Model.PeriodType", "PeriodType")
                        .WithMany()
                        .HasForeignKey("PeriodTypeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyProfile.Entity.Model.SectionType", "SectionType")
                        .WithMany()
                        .HasForeignKey("SectionTypeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyProfile.Entity.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyProfile.Entity.Model.Template", b =>
                {
                    b.HasOne("MyProfile.Entity.Model.PeriodType", "PeriodType")
                        .WithMany()
                        .HasForeignKey("PeriodTypeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyProfile.Entity.Model.User", "User")
                        .WithMany("Templates")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyProfile.Entity.Model.TemplateBudgetSection", b =>
                {
                    b.HasOne("MyProfile.Entity.Model.BudgetSection", "BudgetSection")
                        .WithMany("TemplateBudgetSections")
                        .HasForeignKey("BudgetSectionID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyProfile.Entity.Model.TemplateColumn", "TemplateColumn")
                        .WithMany("TemplateBudgetSections")
                        .HasForeignKey("TemplateColumnID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyProfile.Entity.Model.TemplateColumn", b =>
                {
                    b.HasOne("MyProfile.Entity.Model.Template", "Template")
                        .WithMany("TemplateColumns")
                        .HasForeignKey("TemplateID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyProfile.Entity.Model.ToDoList", b =>
                {
                    b.HasOne("MyProfile.Entity.Model.PeriodType", "PeriodType")
                        .WithMany()
                        .HasForeignKey("PeriodTypeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyProfile.Entity.Model.ToDoListFolder", "ToDoListFolder")
                        .WithMany("ToDoLists")
                        .HasForeignKey("ToDoListFolderID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyProfile.Entity.Model.VisibleElement", "VisibleElement")
                        .WithMany()
                        .HasForeignKey("VisibleElementID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyProfile.Entity.Model.ToDoListFolder", b =>
                {
                    b.HasOne("MyProfile.Entity.Model.User", "User")
                        .WithMany("ToDoListFolders")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyProfile.Entity.Model.ToDoListItem", b =>
                {
                    b.HasOne("MyProfile.Entity.Model.User", "DoneUser")
                        .WithMany()
                        .HasForeignKey("DoneUserID");

                    b.HasOne("MyProfile.Entity.Model.User", "OwnerUser")
                        .WithMany()
                        .HasForeignKey("OwnerUserID");

                    b.HasOne("MyProfile.Entity.Model.ToDoList", "ToDoList")
                        .WithMany("ToDoListItems")
                        .HasForeignKey("ToDoListID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyProfile.Entity.Model.User", b =>
                {
                    b.HasOne("MyProfile.Entity.Model.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyProfile.Entity.Model.Payment", "Payment")
                        .WithOne("User")
                        .HasForeignKey("MyProfile.Entity.Model.User", "PaymentID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyProfile.Entity.Model.Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceID");

                    b.HasOne("MyProfile.Entity.Model.UserType", "UserType")
                        .WithMany()
                        .HasForeignKey("UserTypeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyProfile.Entity.Model.UserErrorLog", b =>
                {
                    b.HasOne("MyProfile.Entity.Model.ErrorLog", "ErrorLog")
                        .WithMany("UserErrorLogs")
                        .HasForeignKey("ErrorLogID");

                    b.HasOne("MyProfile.Entity.Model.UserLog", "UserLog")
                        .WithMany("UserErrorLogs")
                        .HasForeignKey("UserLogID");
                });

            modelBuilder.Entity("MyProfile.Entity.Model.UserLog", b =>
                {
                    b.HasOne("MyProfile.Entity.Model.UserSession", "UserSession")
                        .WithMany("UserLogs")
                        .HasForeignKey("UserSessionID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyProfile.Entity.Model.UserSession", b =>
                {
                    b.HasOne("MyProfile.Entity.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("MyProfile.Entity.Model.UserSettings", b =>
                {
                    b.HasOne("MyProfile.Entity.Model.User", "User")
                        .WithOne("UserSettings")
                        .HasForeignKey("MyProfile.Entity.Model.UserSettings", "ID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyProfile.Entity.Model.UserTag", b =>
                {
                    b.HasOne("MyProfile.Entity.Model.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagID");

                    b.HasOne("MyProfile.Entity.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");
                });
#pragma warning restore 612, 618
        }
    }
}
